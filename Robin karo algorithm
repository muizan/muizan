   //Rabin karp algorithm
    size_t  hash(string str){
        int n=str.length();
        size_t val=0;
        int j=0;
        for(int i=n-1;i>=0;i--){
            size_t t=1;
            
            if(str[j++]=='1'){
                t=2;
            }
            val=(t)*pow(10,i)+val;
        }
        return val;
    }
     bool rkp(string str,string bin,int k,size_t temp){
         int i=0,j=0;
         int t=k-1;
         int n=str.length();
         size_t has=0;
         while(j<n){
             if(j>=k){
                 has=(has-((size_t)str[i]-47)*pow(10,k-1))*10+(str[j]-47);
                 i++;
                 j++;
             }else{
                 has=has+(str[j]-47)*pow(10,t--);
                j++; 
             }
             if(has==temp){
                 return 1;
             }
         }
         return 0;
     }
     string tostring(int n){//conversion of string into binary
        string temp="";
        if(n/2==0){
            return to_string(n%2);
        }
        string t=tostring(n/2)+to_string(n%2);
        return t;
    }
    bool hasAllCodes(string s, int k) {
        int cnt=0;
        if(s.length()<k){
            return 0;
        }
        for(int i=0;i<pow(2,k);i++){
            string bin=tostring(i);
            int v=k-bin.length();
            for(int j=0;j<v;j++){
                bin='0'+bin;
            }
            size_t has=hash(bin);
             if(rkp(s,bin,k,has)){
                 cnt++;
             }
        }
        if(cnt==pow(2,k)){
            return 1;
        }
        return 0;
    }
